/*
👋 Hi! This file was autogenerated by tslint-to-eslint-config.
https://github.com/typescript-eslint/tslint-to-eslint-config

It represents the closest reasonable ESLint configuration to this
project's original TSLint configuration.

We recommend eventually switching this configuration to extend from
the recommended rulesets in typescript-eslint.
https://github.com/typescript-eslint/tslint-to-eslint-config/blob/master/docs/FAQs.md

Happy linting! 💖

 TODO: remove this eventually...
✨ 119 rules replaced with their ESLint equivalents. ✨

❗ 7 ESLint rules behave differently from their TSLint counterparts ❗
  Check ./tslint-to-eslint-config.log for details.

❓ 3 rules are not known by tslint-to-eslint-config to have ESLint equivalents. ❓
  The "@typescript-eslint/tslint/config" section of ./.eslintrc.js configures eslint-plugin-tslint to run them in TSLint within ESLint.
  Check ./tslint-to-eslint-config.log for details.

⚡ 1 new package is required for this ESLint configuration. ⚡
  yarn add eslint-config-prettier --dev

♻ Consider using --comments to replace TSLint comment directives in your source files. ♻

✅ All is well! ✅

*/
module.exports = {
  env: {
    browser: true,
    es6: true,
    node: true,
    mocha: true,
  },
  parser: "@typescript-eslint/parser",
  parserOptions: {
    project: "tsconfig.json",
    sourceType: "module",
  },
  extends: ["plugin:@typescript-eslint/recommended", "eslint:recommended", "prettier"],
  plugins: [
    "prettier",
    "@typescript-eslint",
  ],
  rules: {
    // FIXME: rework this eventually. Tech-debt
    "@typescript-eslint/ban-ts-comment": "off",
    // FIXME: rework this eventually. Tech-debt
    "@typescript-eslint/ban-types": [
      "off",
      {
        types: {
          Object: {
            message: "Avoid using the `Object` type. Did you mean `object`?",
          },
          Function: {
            message: "Avoid using the `Function` type. Prefer a specific function type, like `() => void`.",
          },
          Boolean: {
            message: "Avoid using the `Boolean` type. Did you mean `boolean`?",
          },
          Number: {
            message: "Avoid using the `Number` type. Did you mean `number`?",
          },
          String: {
            message: "Avoid using the `String` type. Did you mean `string`?",
          },
          Symbol: {
            message: "Avoid using the `Symbol` type. Did you mean `symbol`?",
          },
        },
      },
    ],
    "@typescript-eslint/dot-notation": "warn",
    // FIXME: rework this eventually. Tech-debt
    "@typescript-eslint/no-empty-interface": "off",
    // FIXME: rework this eventually. Tech-debt
    "@typescript-eslint/no-explicit-any": "off",
    // FIXME: rework this eventually. Tech-debt
    "@typescript-eslint/no-inferrable-types": "off",
    // FIXME: rework this eventually. Tech-debt
    "@typescript-eslint/no-namespace": "off",
    // FIXME: rework this eventually. Tech-debt
    "@typescript-eslint/no-non-null-assertion": "off",
    "@typescript-eslint/no-unused-vars": "off",
    "@typescript-eslint/no-use-before-define": "off",
    // FIXME: rework this eventually. Tech-debt
    "@typescript-eslint/no-var-requires": "off",
    // FIXME: rework this eventually. Tech-debt
    "@typescript-eslint/prefer-namespace-keyword": "off",
    "@typescript-eslint/triple-slash-reference": [
      "warn",
      {
        path: "always",
        types: "prefer-import",
        lib: "always",
      },
    ],
    "dot-notation": "warn",

    "no-constant-condition": ["error", { checkLoops: false }],
    // FIXME: tech-debt.
    "no-extra-boolean-cast": "off",
    // FIXME: rework this eventually. Tech-debt
    "no-inner-declarations": "off",
    // FIXME: rework this eventually. Tech-debt
    "no-prototype-builtins": "off",
    // FIXME: This needs removed. Tech-Debt
    "no-undef": "off",
    "no-unused-vars": "off",
    "no-useless-escape": "off",
    "no-use-before-define": "off",
    // FIXME: rework this eventually. Tech-debt
    "no-var": "off",
  },
};
